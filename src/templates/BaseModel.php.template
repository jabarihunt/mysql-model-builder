<?php namespace [NAMESPACE]\Models\Base;

    use jabarihunt\MySQL as DB;
    use [NAMESPACE]\Models\[MODEL_NAME];

    /********************************************************************************
     * [MODEL_NAME_UPPERCASE] BASE MODEL
     * Auto Generated via ../cli/model_builder_docs/BaseModelBuilder.php
     ********************************************************************************/

        class [MODEL_NAME]Model extends Model {

            /********************************************************************************
             * CLASS VARIABLES
             * @var string $id
             * @var string $data
             * @var int $expires
             ********************************************************************************/

[CLASS_VARIABLES]

            /********************************************************************************
             * CLASS CONSTANTS
             * @var array DATA_TYPES
             * @var array REQUIRED_FIELDS
             * @var string TABLE_NAME
             ********************************************************************************/

                const DATA_TYPES = [
[CLASS_CONSTANT_DATA_TYPES]
                ];

                const TABLE_NAME      = '[TABLE_NAME]';
                const PRIMARY_KEY     = '[PRIMARY_KEY]';
                const REQUIRED_FIELDS = [[CLASS_CONSTANT_REQUIRED_FIELDS]];

            /********************************************************************************
             * CLASS CONSTRUCTOR
             * @param array $data
             ********************************************************************************/

                protected function __construct(array $data) {
                    parent::__construct($data);
                }

            /********************************************************************************
             * GETTERS
             * Methods that return individual class variables.
             ********************************************************************************/

[GETTERS]

            /********************************************************************************
             * CREATE METHOD
             * @param array $data An array values to update
             * @return [MODEL_NAME]
             ********************************************************************************/

                public static function create(array $data): [MODEL_NAME] {

                    // RUN BEFORE CREATE CALLBACK | SET INITIAL VARIABLES | SANITIZE DATA

                        $data = call_user_func('static::beforeCreate', $data);
                        $data = self::sanitize($data);
                        $[MODEL_NAME_FIRST_LETTER_LOWERCASE] = NULL;

                    // VALIDATE DATA -> INSERT INTO DATABASE AND RETURN MODEL INSTANCE

                        if (
[CREATE_METHOD_VALIDATION_CRITERIA]
                        ) {
                            // ADD NULL VALUES

                                foreach (self::DATA_TYPES as $key => $dataType) {

                                    if (
                                        empty($data[$key]) &&
                                        !in_array($key, self::REQUIRED_FIELDS) &&
                                        $key != self::PRIMARY_KEY
                                    ) {
                                        $data[$key] = NULL;
                                    }

                                }

                            // ADD TO DATABASE

                                $result = DB::prepare(
                                    "INSERT INTO `[TABLE_NAME]` ([CREATE_METHOD_COLUMN_NAMES]) values ([CREATE_QUERY_COLUMN_PLACEHOLDERS])",
                                    $data,
                                    [CREATE_METHOD_BIND_TYPES]
                                );

                            // CREATE MODEL INSTANCE | CLOSE PREPARED STATEMENT

                                if (is_int($result) && $result > 0) {
                                    $[MODEL_NAME_FIRST_LETTER_LOWERCASE] = new [MODEL_NAME]($data);
                                    call_user_func([$[MODEL_NAME_FIRST_LETTER_LOWERCASE], 'afterCreate']);
                                }

                                $statement->close();

                        }

                    // RUN AFTER CREATE CALLBACK | RETURN MODEL

                        return $[MODEL_NAME_FIRST_LETTER_LOWERCASE];

                }

            /********************************************************************************
             * GET METHOD
             * @param mixed $idOrData
             * @return array
             ********************************************************************************/

                public static function get($idOrData): array {

                    // RUN BEFORE GET CALLBACK | SET INITIAL VARIABLES

                        $idOrData = call_user_func('static::beforeGet', $idOrData);
                        $[MODEL_NAME_FIRST_LETTER_LOWERCASE] = [];

                    // MAKE SURE PASSED VALUE ISN'T EMPTY |  | QUERY DATABASE FOR MODEL DATA AND CREATE MODEL | RUN AFTER CREATE CALLBACK

                        if (!empty($idOrData)) {

                            // VALIDATE PASSED VALUE-> CHECK IF ITS AN INTEGER OR ARRAY

                                if (is_int($idOrData)) {

                                    // ASSUME A PRIMARY KEY WAS PASSED

                                        $result = DB::query("SELECT [ALL_COLUMN_NAMES] FROM [TABLE_NAME] WHERE `id` = '{$idOrData}'");

                                        if (!empty($result)) {
                                            $[MODEL_NAME_FIRST_LETTER_LOWERCASE][0] = new [MODEL_NAME]($data);
                                            call_user_func([$[MODEL_NAME_FIRST_LETTER_LOWERCASE][0], 'afterGet']);
                                        }

                                } else if (is_array($idOrData)) {

                                    // ASSUME WHERE STATEMENT VALUES WERE PASSED | SET INITIAL VARIABLES

                                        $data       = $idOrData;
                                        $bindTypes  = '';
                                        $params     = [];
                                        $where      = '';

                                    // LOOP THROUGH DATA TO BUILD WHERE STATEMENT

                                        foreach ($data as $part) {

                                            if (is_array($part) && count($part) === 3) {

                                                // GET QUERY PARTS | SANITIZE AND ADD TO SELECT QUERY PARTS | ADD BIND TYPE

                                                    list($field, $operator, $value) = $part;

                                                    $params[$field] = DB::sanitize($value, static::DATA_TYPES[$field]);
                                                    $where       .= "`{$field}` {$operator} ? AND ";

                                                    if (in_array(static::DATA_TYPES[$field], DB::DATA_TYPE_INTEGER)) {$bindTypes .= 'i';}
                                                    else if (in_array(static::DATA_TYPES[$field], DB::DATA_TYPE_REAL)) {$bindTypes .= 'd';}
                                                    else {$bindTypes .= 's';}

                                            }

                                        }

                                        $where = rtrim($where, ' AND ');

                                    // CREATE $ EXECUTE PREPARED STATEMENT

                                        $result = DB::prepare(
                                            "SELECT [ALL_COLUMN_NAMES] FROM [TABLE_NAME] WHERE {$where}"
                                            $params,
                                            $bindTypes
                                        );


                                    // MAKE SURE RESULTS WERE RETURNED -> CREATE ARRAY OF OBJECTS

                                        if (!empty($results)) {

                                            $key = 0;

                                            foreach ($result as $row) {

                                                $[MODEL_NAME_FIRST_LETTER_LOWERCASE][$key] = new [MODEL_NAME]($row);

                                                if ($[MODEL_NAME_FIRST_LETTER_LOWERCASE][$key] instanceof [MODEL_NAME]) {
                                                    call_user_func([$[MODEL_NAME_FIRST_LETTER_LOWERCASE][$key], 'afterGet']);
                                                }

                                                $key++;

                                            }

                                        }

                                }

                        }

                    // RETURN MODEL

                        return $[MODEL_NAME_FIRST_LETTER_LOWERCASE];

                }

        }

?>